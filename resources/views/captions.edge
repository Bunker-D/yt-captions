<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Get Youtube Captions</title>
	<link href="https://fonts.googleapis.com/css?family=Poppins:400,500&display=swap" rel="stylesheet">
	@include('partials/common-style')
	<style>
		#menu {
			position: fixed;
			z-index: 90;
			top: 16px;
			left: 11px;
			max-height: 380px;
			transition: max-height .15s;
			overflow: hidden;
		}
		#menu.menu-off { max-height: 53px; }
		.menu-item {
			cursor: pointer;
			line-height: 0;
			display: table;
		}
		.menu-item img {
			width: 35px;
			height: 35px;
			margin: 9px;
			background-color: white;
		}
		.menu-text {
			display: table-cell;
			vertical-align: middle;
			margin: 0 9px;
			max-width: 0;
			transition: max-width .4s;
			overflow: hidden;
			background-color: white;
		}
		.menu-item:hover .menu-text { max-width: 13em; }

		main {
			max-width: 850px;
			width: 80%;
			margin: auto;
		}

		.head {
			width: 100%;
			display: flex;
			padding: 2em 0 ;
		}
		img {
			width: 20%;
			max-width: 4.5em;
			margin: .4em 1em 0 0;
			height: fit-content;
		}
		.video-descriptor {
			flex-grow: 100
		}

		blockquote { margin: 2em 0; }
		blockquote:focus { outline: none; }

		.foot {
			display: block;
			width: 100%;
			height: 4em;
    		border-top: 2px solid #dc0000;
		}

		span[data-time]{
			position: relative;
		}
		span[data-time]:hover::before {
			content: '';
			position: absolute;
			bottom: calc( 100% + 4px );
			background-color: #dc0000;
			width: 0.7em;
			height: 0.8em;
			-webkit-transform: skew(0, 125deg);
			-moz-transform: skew(0, 125deg);
			transform: skew(0, 125deg);
		}
		span[data-time]:hover::after {
			content: attr(data-time);
			font-weight: bold;
			position: absolute;
			bottom: calc( 100% + 4px );
			left: 0;
			background-color: #dc0000;
			color: white;
			font-size: .9em;
			line-height: 1em;
			padding: 5px 7px;
			border-radius: 4px;
			display: inline-block;
			white-space: nowrap;
		}
		p > span[data-time]:first-child::after,
		p > :first-child > span[data-time]:first-child::after,
		p > :first-child > :first-child > span[data-time]:first-child::after,
		p > :first-child > :first-child > :first-child > span[data-time]:first-child::after {
			content: attr(data-time);
			font-weight: normal;
			position: absolute;
			bottom: unset;
			left: unset;
			right: 100%;
			top: 3px;
			background-color: #dc0000;
			color: white;
			font-size: .8em;
			line-height: unset;
			padding: 0 0.4em;
			border-radius: 6px;
			margin-right: 0.9em;
		}
		p > span[data-time]:first-child:hover::before,
		p > :first-child > span[data-time]:first-child:hover::before,
		p > :first-child > :first-child > span[data-time]:first-child:hover::before,
		p > :first-child > :first-child > :first-child > span[data-time]:first-child:hover::before {
			content: '';
			position: absolute;
			bottom: 8px;
			right: calc( 100% + 0.6em );
			background-color: #dc0000;
			width: 0.7em;
			height: 0.41em;
			-webkit-transform: skew(60deg, -30deg);
			-moz-transform: skew(60deg, -30deg);
			transform: skew(60deg, -30deg);
		}

		#ms-img { display: none; }
		#ms-img-no { display: block; }
		.ms-accuracy #ms-img { display: block; }
		.ms-accuracy #ms-img-no { display: none; }
		.ms-accuracy span[data-time]:hover::after,
		.ms-accuracy p > span[data-time]:first-child::after,
		.ms-accuracy p > :first-child > span[data-time]:first-child::after,
		.ms-accuracy p > :first-child > :first-child > span[data-time]:first-child::after,
		.ms-accuracy p > :first-child > :first-child > :first-child > span[data-time]:first-child::after {
			content: attr(data-time-ms);
		}

		#dotcap { display: none; }
		#dotcap-no { display: block; }
		.auto-capitalize #dotcap { display: block; }
		.auto-capitalize #dotcap-no { display: none; }

		#time-editor {
			font-family: monospace;
			font-size: 35px;
			background-color: #dc0000;
			width: fit-content;
			color: #fff;
			line-height: 1em;
			padding: 8px 21px;
			border-radius: 24px;
			border: solid 8px white;
			outline: none;
			z-index: 40;
			position: fixed;
			top: 35%;
			left: 50%;
			transform: translate( -50%, 0 );
		}
		#time-editor.bottom { top: 65%; }
		#time-editor.flicker { border-color: black; }
		#time-editor::before {
			content: '';
			position: fixed;
			width: 10000px;
			height: 10000px;
			left: -5000px;
			top: -5000px;
			z-index: -1;
		}
		#time-editor:focus .active {
			background: #111;
		}
		.time-edition-affected { color: #4d98fc; }
		.time-edition-target { color: #dc0000;  }
	</style>
</head>
<body>

<main>

	<div class="head">
		<img src="/yt-captions.png">
		@!videoDescriptor( { id, title, author, date, url } )
	</div>

	<blockquote id="captions" contenteditable="true">
		@each( par in captions )~
<p>
			@each( bit in par )~
<span
	data-time="{{ bit[ 0 ].split( '.' )[ 0 ] }}"
	data-time-ms="{{ bit[ 0 ] }}"
>{{{ bit[ 1 ] }}}</span>
			@endeach~
</p>
		@endeach~
	</blockquote>
	<div class="foot"></div>
</main>

<div id="menu" class="menu-off">
	<div class="menu-item" id="burger">
		<img src="/icons/burger.png">
	</div>
	<div class="menu-item" onclick="msAccuracy()">
		<img src="/icons/ms.png" id="ms-img"><img src="/icons/ms-no.png" id="ms-img-no">
		<div class="menu-text">Switch&nbsp;time&nbsp;accuracy&nbsp;&nbsp;</div>
	</div>
	<div class="menu-item">
		<label for="merge-with" style="cursor:pointer">
			<img src="/icons/script.png">
		</label>
		<input id="merge-with" type="file" onchange="mergeWith(this.files)" style="display:none"/>
		<div class="menu-text">Merge&nbsp;with&nbsp;script&nbsp;&nbsp;</div>
	</div>
	<div class="menu-item" onclick="saveCaptions()">
		<img src="/icons/download.png">
		<div class="menu-text">Save&nbsp;current&nbsp;state&nbsp;&nbsp;</div>
	</div>
	<div class="menu-item" onclick="exportCaptions()">
		<img src="/icons/Export.png">
		<div class="menu-text">Export&nbsp;subtitles&nbsp;&nbsp;</div>
	</div>
	<div class="menu-item" onclick="toggleCapitalize()">
		<img src="/icons/dotcap.png" id="dotcap"><img src="/icons/dotcap-no.png" id="dotcap-no">
		<div class="menu-text">Automatic&nbsp;capital&nbsp;letters&nbsp;&nbsp;</div>
	</div>
	<div class="menu-item" onclick="capitalizeSoloI()">
		<img src="/icons/icap.png">
		<div class="menu-text">Capitalize&nbsp;isolated&nbsp;“i”'s&nbsp;&nbsp;</div>
	</div>
	{{-- //IMPROVE italic, bold, underlined, font color --}}
</div>

<script>
	// const captions = document.getElementById( 'captions' );

	//===========================//
	//   MENU FUNCTIONALITIES   //
	//=========================//
	//IMPROVE prevent update/closing the page?

	document.getElementById( 'burger' ).onclick = () => document.getElementById( 'menu' ).classList.toggle( 'menu-off' );
	function msAccuracy() {
		document.body.classList.toggle( 'ms-accuracy' );
	}
	async function mergeWith( files ) {
		if ( ! files.length ) return;
		const reader = new FileReader();
		async function onload() {
			const captions = await ( await fetch( '/merge', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify( {
					captions: pageContent().captions,
					text: reader.result,
				} ),
			} ) ).json();
			const editor = document.getElementById( 'captions' );
			editor.innerHTML = captions.map( ( par ) =>
				'<p>' +
				par.map( ( [ time, text ] ) =>
					`<span data-time="${ time.split( '.' )[ 0 ] }" data-time-ms="${ time }">${ text }</span>`
				).join('')
				+ '</p>'
			).join( '' );
		};
		reader.onload = onload;
		reader.readAsText( files[ 0 ] );
	}
	function saveCaptions() {
		fileFromServer( '/convert/save', '.cpt' );
	}
	function exportCaptions() {
		fileFromServer( '/convert/srt', '.srt' );
	}
	async function fileFromServer( requestURL, fileExtension ) {
		const text = await ( await fetch( requestURL, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify( pageContent() ),
		} ) ).text();
		const filename = document.getElementById( 'video-title' ).textContent.replace( /[.\\/:*?"<>|]/g, '' ) + fileExtension;
		const element = document.createElement( 'a' );
		element.href = 'data:text/plain;charset=utf-8,' + text;
		element.download = filename;
		element.style.display = 'none';
		document.body.appendChild( element );
		element.click();
		document.body.removeChild( element );
	}
	
	/** Capitalize all isoliated “i” in the editor. */
	function capitalizeSoloI() {
		const editor = document.getElementById( 'captions' );
		let lastChar = '';
		let bufferedNode;
		const regLetter = /\p{L}/u;
		const soloi = /(^|[^\p{L}])(?:i)($|[^\p{L}])/gu;
		const capitaliseI = ( node ) => {
			if ( node.nodeType === 3 ) {
				// For text nodes…
				const text = node.textContent;
				if ( ! text ) return;
				// Capitalize closing i of the previous text node if need be.
				if ( bufferedNode ) {
					if ( ! text[ 0 ].match( regLetter ) ) {
						bufferedNode.textContent = bufferedNode.textContent.substring( 0, bufferedNode.textContent - 1 ) + 'I';
					}
					bufferedNode = undefined;
				}
				// Replace (or store) solo i's
				if ( text.match( soloi ) ) {
					node.textContent = text.replace( soloi, ( m, pre, post ) => {
						if ( ( ! pre ) && lastChar.match( regLetter ) ) return m;
						if ( ! post ) {
							bufferedNode = node;
							return m;
						}
						return pre + 'I' + post;
					} );
				}
				// Remember last character
				lastChar = text[ text.length - 1 ];
			} else if ( node.nodeType === 1 ) {
				for ( const child of node.childNodes ) capitaliseI( child )
			}
		}
		for ( const par of editor.children ) {
			lastChar = '';
			bufferedNode = undefined;
			capitaliseI( par );
		}
	}

	//=======================//
	//   USEFUL FUNCTIONS   //
	//=====================//
	
	/**
	 * Convert the current captions state into an array of paragraphs,
	 * that are described as an array of timed bits, being described as [time,text].
	 * title: string
	 * author: string
	 * date: string
	 * url: string
	 */
	function pageContent()/*: { captions: [string,string][][], }*/ {
		cleanEditor();
		const captions = [ [ [ '', '' ] ] ];
		let currentPar = captions[ 0 ];
		let currentBit = currentPar[ 0 ];
		const newPar = () => {
			if ( currentPar.length ) {
				currentPar = [];
				captions.push( currentPar );
			}
		};
		const newBit = ( span ) => {
			if ( ! span.textContent ) return;
			let t;
			try {
				t = span.dataset.timeMs;
			} catch ( e ) { // Text node
				currentBit[ 1 ] += span.textContent.replaceAll( '&', '&amp;' ).replaceAll( '<', '&lt;' );
			}
			if ( t ) { // Timed span
				currentBit = [ t, span.innerHTML ];
				currentPar.push( currentBit );
			} else { // HTML tag, but not a timed span
				const tag = [ '', 'i', 'b', 'u' ][ [ 'I', 'B', 'U' ].indexOf( span.tagName ) + 1 ]; // # <font>
				const start = currentPar.length;
				for ( const subspan of span.childNodes ) {
					newBit( subspan );
				}
				if ( tag && currentPar.length > start ) {
					currentPar[ start ][ 1 ] = '<' + tag + '>' + currentPar[ start ][ 1 ];
					currentBit[ 1 ] += '</' + tag + '>';
				}
			}
		};
		const paragraphs = document.getElementById( 'captions' ).childNodes;
		for ( const p of paragraphs ) {
			if ( p.tagName === 'P' ) {
				newPar();
				for ( const span of p.childNodes ) {
					newBit( span );
				}
			} else {
				if ( p.textContent.trim() ) newBit( p );
			}
		}
		if ( ! currentPar.length ) captions.pop();
		if ( captions[ 0 ][ 0 ][ 1 ].trim() ) {
			captions[ 0 ][ 0 ][ 0 ] = ( captions.length > 1 ) ? captions[ 1 ][ 0 ][ 0 ].replace( /\d/g, '0' ) : '00:00:00.000';
		} else {
			captions.splice( 0 , 1 );
		}
		const res = { captions };
		for ( const key of [ 'title', 'author', 'date' ] ) {
			let value = document.getElementById( 'video-' + key );
			if ( value ) {
				value = value.textContent.trim();
				if ( value.endsWith( ',' ) ) value = value.substr( 0, value.length - 1 ).trim();
				if ( value ) res[ key ] = value;
			}
		}
		let url = document.getElementById( 'video-descriptor' );
		if ( url ) {
			url = url.href;
			if ( url ) res.url = url;
		}
		return res;
	}
	/**
	 * Remove empty spans, remove unnecessary nbsp's, remove unsupported HTML tags, put French-typography-related nbsp's
	 */
	function cleanEditor() {
		const nbsp = String.fromCharCode( 160 );
		const clean = ( el ) => {
			if ( el.nodeType === 1 ) {
				//IMPROVE should ensure the absence of unsupported HTML tags
				if ( ! el.textContent ) {
					if ( el.tagName !== 'BR' ) el.remove();
					return;
				}
				for ( const e of el.childNodes ) clean( e );
			} else if ( el.nodeType === 3 ) {
				let s = el.textContent;
				if ( s[ 0 ] === nbsp ) s = ' ' + s.substr( 1 );
				if ( s[ s.length - 1 ] === nbsp ) s = s.substr( 0, s.length - 1 ) + ' ';
				el.textContent = s.replace( /(?<=[«({\[]) | (?=[»)}\]:;!?])/g, nbsp );
			}
		}
		const paragraphs = document.getElementById( 'captions' ).childNodes;
		for ( const el of paragraphs ) clean( el );
	}

	//=====================//
	//   OVERWRITE COPY   //
	//===================//

	document.addEventListener( 'copy', function( e ) {
		// Abort if invalid selection (i.e. not contained within the captions block)
		const sel = window.getSelection();
		if ( sel.rangeCount !== 1 ) return;
		const range = sel.getRangeAt( 0 );
		const editor = document.getElementById( 'captions' );
		if ( ! ( editor.contains( range.startContainer ) && editor.contains( range.startContainer ) ) ) return;
		// Copy the selection into a div to work on it
		const clip = document.createElement( 'div' );
		clip.append( range.cloneContents() )
		// Add timings where needed
		let noTime = true;
		const timeTag = ( document.body.classList.contains( 'ms-accuracy' ) ) ? 'timeMs' : 'time';
		const time = ( el ) => {
			let t;
			for ( const subel of el.children ) {
				t = subel.dataset[ timeTag ];
				if ( t ) break;
			}
			if ( t ) {
				noTime = false;
				el.innerHTML = '<code>' + t + ' - </code>' + el.innerHTML;
			}
		};
		for ( const el of clip.children ) if ( el.tagName === 'P' ) time( el );
		if ( noTime ) time( clip );
		if ( noTime ) {
			let el = sel.anchorNode;
			let t;
			do {
				el = el.parentElement;
				t = el.dataset[ timeTag ];
			} while ( ! t )
			if ( t ) clip.innerHTML = '<code>' + t + ' - </code>' + clip.innerHTML;
		}
		// Update the clipboard
		e.clipboardData.setData( 'text/html', clip.innerHTML );
		e.clipboardData.setData( 'text/plain', clip.textContent );
		clip.remove();
		e.preventDefault();
	} );
	
	//======================//
	//   OVERWRITE PASTE   //
	//====================//

	document.addEventListener( 'paste', function( e ) {
		// Abort if invalid selection (i.e. not contained within the captions block)
		const sel = window.getSelection();
		if ( sel.rangeCount !== 1 ) return;
		const range = sel.getRangeAt( 0 );
		const editor = document.getElementById( 'captions' );
		if ( ! ( editor.contains( range.startContainer ) && editor.contains( range.endContainer ) ) ) return;
		e.preventDefault();
		// Get the data to paste into a div to work on it
		const clip = document.createElement( 'div' );
		clip.innerHTML = e.clipboardData.getData( "text/html" );
		// Inject the cleaned HTML into another div
		let toPaste = document.createElement( 'div' );
		let textNode;
		const transfer = ( fromEl, toEl ) => {
			const text = ( t ) => {
				if ( textNode ) {
					textNode.appendData( t );
				} else {
					textNode = document.createTextNode( t );
					toEl.appendChild( textNode );
				}
			}
			for ( const el of fromEl.childNodes ) {
				if ( el.nodeType === 1 ) {
					const tag = { I: 'i', EM: 'i', B: 'b', STRONG: 'b',  U: 'u' }[ el.tagName ]; // # <font>
					if ( tag ) {
						textNode = undefined;
						const newEl = document.createElement( tag );
						toEl.appendChild( newEl );
						transfer( el, newEl );
						textNode = undefined;
					} else if ( el.tagName === 'P' ) {
						text( ' ' );
						transfer( el, toEl );
						text( ' ' );
					} else if ( el.tagName === 'BR' ) {
						text( ' ' );
					} else if ( el.tagName !== 'CODE' || ! el.innerHTML.match( /^[\d:.]+ - $/ ) )  {
						transfer( el, toEl );
					}
				} else if ( el.nodeType === 3 ) {
					text( el.textContent );
				}
			}
		};
		transfer( clip, toPaste );
		// Paste
		sel.deleteFromDocument();
		toPaste = toPaste.childNodes;
		for ( let k = toPaste.length; k--; ) {
			range.insertNode( toPaste[ k ] );
		}
	} );

	//==================================//
	//   TIMING EDIT FUNCTIONALITIES   //
	//================================//

	document.getElementById( 'captions' ).addEventListener( 'click', ( e ) => {
		const editor = document.getElementById( 'captions' );
		const targetClass = 'time-edition-target', affectClass = 'time-edition-affected';
		// Only Alt+Click must be handled
		if ( ! e.ctrlKey ) return;
		e.preventDefault();
		//IMPROVE Ctrl+Alt+Click should also cut the span at the word, for creating new timing locations
		// Get the clicked timed element
		let el = e.target;
		while ( ! el.dataset.timeMs ) {
			if ( el === editor ) return;
			el = el.parentElement;
		}
		for ( const span of editor.getElementsByClassName( targetClass ) ) span.classList.remove( targetClass );
		el.classList.add( targetClass );
		// Create a time editor
		const timeEl = document.createElement( 'button' );
		timeEl.id = 'time-editor';
		let ms = false;
		for ( const char of el.dataset.timeMs ) {
			if ( char.charCodeAt( 0 ) < 48 || char.charCodeAt( 0 ) > 57 ) {
				timeEl.appendChild( document.createTextNode( char ) );
				if ( char === '.' ) ms = true;
			} else {
				const d = document.createElement( 'span' );
				d.innerHTML = char;
				if ( ms ) d.classList.add( 'ms' );
				timeEl.appendChild( d );
			}
		}
		if ( el.offsetTop - window.pageYOffset < window.innerHeight / 2 ) timeEl.classList.add( 'bottom' );
		// Set digit maximal values
		let k = timeEl.children.length - ( ( ms ) ? 5 : 2);
		if ( k >= 0 ) {
			timeEl.children[ k ].dataset.max = '5';
			k -= 2;
			if ( k >= 0 ) timeEl.children[ k ].dataset.max = '5';
		}
		timeEl.firstElementChild.classList.add( 'active' );
		// Event listeners
		timeEl.addEventListener( 'click', ( evt ) => {
			evt.preventDefault();
			const target = evt.target;
			const classList = target.classList;
			if ( target.tagName === 'SPAN' ) {
				if ( classList.contains( 'active' ) ) return;
				for ( const digit of target.parentElement.children ) digit.classList.remove( 'active' );
				classList.add( 'active' );
			} else {
				classList.add( 'flicker' );
				setTimeout( () => {
					classList.remove( 'flicker' );
					setTimeout( () => {
						classList.add( 'flicker' );
						setTimeout( () => {
							classList.remove( 'flicker' );
						}, 200 );
					}, 200 );
				}, 200 );
			}
		} );
		timeEl.addEventListener( 'keydown', ( evt ) => {
			evt.preventDefault();
			const key = evt.key;
			if ( '0123456789'.indexOf( key ) >= 0 ) {
				// Record digit
				const digit = document.getElementById( 'time-editor' ).getElementsByClassName( 'active' )[ 0 ];
				if ( digit.dataset.max && '012345'.indexOf( key ) < 0 ) return;
				digit.innerHTML = key;
				const next = digit.nextElementSibling;
				if ( next ) {
					digit.classList.remove( 'active' );
					next.classList.add( 'active' );
				}
			} else if ( key === 'Escape' || key === 'Enter' ) {
				const timeEl = document.getElementById( 'time-editor' );
				if ( key === 'Enter' ) {
					// Save new Timing
					const time = timeEl.textContent;
					let k = 0;
					let span, spanContent, par;
					const newSpan = ( innerHTML ) => {
						if ( span && spanContent ) span.innerHTML = spanContent;
						spanContent = '';
						span = document.createElement( 'span' );
						span.dataset.timeMs = time;
						span.dataset.time = time.split( '.' )[ 0 ];
					}
					const moveToSpan = ( elem ) => {
						if ( elem.nodeType === 1 ) {
							const tag = [ '', 'bs', 'i', 'b', 'u' ][ [ 'BS', 'I', 'B', 'U' ].indexOf( elem.tagName ) + 1 ]; // # <font>
							if ( tag ) {
								spanContent += '<' + tag + '>';
								if ( tag === 'bs' ) return;
							}
							if ( elem.dataset.timeMs ) {
								spanContent += elem.innerHTML;
							} else {
								for ( const subel of elem.children ) moveToSpan( subel );
							}
							if ( tag ) spanContent += '</' + tag + '>';
						} else if ( elem.nodeType === 3 ) {
							spanContent += elem.textContent;
						}
					}
					const affected = [];
					for ( const elem of editor.getElementsByClassName( affectClass ) ) affected.push( elem );
					affected.reverse();
					while ( affected.length ) {
						const elem = affected.pop();
						if ( elem.tagName === 'P' ) {
							newSpan();
							moveToSpan( elem );
							elem.innerHTML = '';
							elem.appendChild( span );
							elem.classList.remove( affectClass );
							par = undefined;
						} else {
							let par_ = elem.parentElement;
							while ( par_.tagName !== 'P' ) { // Check if in same p of if a new span shall be created and placed
								if ( par_ === document.body ) throw 'Where am I?'
								par_ = par_.parentElement;
							}
							if ( par_ !== par ) {
								par = par_;
								newSpan();
								elem.parentElement.insertBefore( span, elem );
							}
							moveToSpan( elem );
							elem.remove();
						}
					}
					newSpan();
				}
				// Clean
				for ( const xClass of [ targetClass, affectClass ] ) {
					const toClean = [];
					for ( const elem of editor.getElementsByClassName( xClass ) ) toClean.push( elem  )
					for ( const elem of toClean ) elem.classList.remove( xClass );
				}
				timeEl.remove();
				return;
			} else if ( key.startsWith( 'Arrow' ) ) {
				const digit = document.getElementById( 'time-editor' ).getElementsByClassName( 'active' )[ 0 ];
				if ( key === 'ArrowLeft' || key === 'ArrowRight' ) {
					// Move active digit left or right
					const next = ( key === 'ArrowRight' ) ? digit.nextElementSibling : digit.previousElementSibling;
					if ( next ) {
						digit.classList.remove( 'active' );
						next.classList.add( 'active' );
					}
					return;
				} else if ( key === 'ArrowUp' ) {
					// Increase digit
					const recursive = ( d ) => {
						if ( ! d ) return false;
						const n = d.innerHTML;
						if ( n === ( d.dataset.max ?? '9' ) ) {
							if ( recursive( d.previousElementSibling ) ) {
								d.innerHTML = '0';
								return true;
							}
							return false
						}
						d.innerHTML = Number( n ) + 1;
						return true;
					}
					recursive( digit );
				} else if ( key === 'ArrowDown' ) {
					// Decrease digit
					const recursive = ( d ) => {
						if ( ! d ) return false;
						const n = d.innerHTML;
						if ( n === '0' ) {
							if ( recursive( d.previousElementSibling ) ) {
								d.innerHTML = d.dataset.max ?? '9';
								return true;
							}
							return false
						}
						d.innerHTML = Number( n ) - 1;
						return true;
					}
					recursive( digit );
				}
			} else return;
			// Clear what was previously found to be affected
			const oldAffected = []; // Variable needed because `for (const x of y.getElementsByClassName(z)) oldAffected.push( elem ); x.classList.remove(z);` doesn't properly work.
			for ( const elem of editor.getElementsByClassName( affectClass ) ) oldAffected.push( elem );
			for ( const elem of oldAffected ) elem.classList.remove( affectClass );
			// Show affected spans
			const target = editor.getElementsByClassName( targetClass )[ 0 ];
			const newTime = document.getElementById( 'time-editor' ).textContent;
			let next/*: (Element): Element*/, first/*: (Element): Element*/, outside/*: (Element); boolean*/;
			if ( newTime > target.dataset.timeMs ) {
				next = ( elem ) => elem.nextElementSibling;
				first = ( elem ) => elem.firstElementChild;
				outside = ( elem ) => ( elem.dataset.timeMs > newTime );
			} else if ( newTime < target.dataset.timeMs ) {
				next = ( elem ) => elem.previousElementSibling;
				first = ( elem ) => elem.lastElementChild;
				outside = ( elem ) => ( elem.dataset.timeMs < newTime );
			} else return;
			const affected = ( container/*: Element*/, start/*: Element*/, inherited/*: Element[]*/ ) => {
				let ok/*: Element[]*/, subel/*: Element*/;
				if ( start ) { // Start is provided when starting at a given element within a container
					ok = inherited ?? [ start ];
					subel = next( start );
				} else { // Else, a container to explore is provided
					ok = [];
					subel = first( container );
				}
				while ( subel ) { // Go through the succesive elements
					if ( subel.dataset.timeMs ) {
						if ( outside( subel ) ) return ok
					} else {
						const sub = affected( subel ); // If not a timed-span, handle with recursive call
						if ( sub ) return [ ...ok, ...sub ]; // A list is returned only when reaching a non affected element. If all content affected, null is returned.
					}
					ok.push( subel );
					subel = next( subel );
				} // If the end of the container is reached...
				if ( start ) { // If at the start...
					subel = start.parentElement;
					if ( subel === editor ) return ok; // Don't go further than the top container
					if ( inherited ) return affected( null, subel, ok );
					if ( start === first( subel ) ) return affected( null, subel );
					return affected( null, subel, ok );
				}
				return null; // If recursive call, return null: the all container is affected.
			};
			for ( const elem of affected( null, target ) ) elem.classList.add( affectClass );
		} );

		document.body.getElementsByTagName( 'main' )[ 0 ].appendChild( timeEl );
		timeEl.focus();
	} );

	//===============================================//
	//   AUTOMATIC CAPITALIZE FOLLOWING CHARACTER   //
	//=============================================//

	function capitalizeIfNeeded( e ) {
		if ( '.!?'.indexOf( e.key ) < 0 ) return;
		const sel = window.getSelection();
		if ( sel.rangeCount !== 1 ) return;  // Abort if no selection or cursor
		const range = sel.getRangeAt( 0 );
		if ( ! range.collapsed ) false;  // Abort if selection instead of a single cursor
		const editor = document.getElementById( 'captions' );
		if ( ! editor.contains( range.startContainer ) ) return;  // Abort if cursor not in editor

		let node = range.startContainer;
		let text = node.textContent.substring( range.startOffset );
		let charMatch = text.match( /\w/ );
		if ( charMatch ) {
			const cap = charMatch[ 0 ].toUpperCase();
			if ( charMatch[ 0 ] !== cap ) {
				node.textContent = node.textContent.substring( 0, range.startOffset + charMatch.index ) + cap + text.substring( charMatch.index + 1 );
			}
		} else {
			let firstChar = ( n ) => {
				if ( n.nodeType === 3 ) {
					node = n;
					text = n.textContent;
					charMatch = text.match( /\w/ );
				} else if ( n.nodeType === 1 ) {
					for ( const c of n.childNodes ) {
						firstChar( c );
						if ( charMatch ) return;
					}
				}
			};
			while ( !charMatch ) {
				let next = node.nextSibling;
				while ( !next ) {
					node = node.parentNode;
					if ( node === editor ) return;
					next = node.nextSibling;
				}
				node = next;
				firstChar( node );
			}
			const cap = charMatch[ 0 ].toUpperCase();
			if ( charMatch[ 0 ] !== cap ) {
				node.textContent = text.substring( 0, charMatch.index ) + cap + text.substring( charMatch.index + 1 );
			}
		}
	}
	document.getElementById( 'captions' ).addEventListener( 'keypress', capitalizeIfNeeded );
	document.body.classList.add( 'auto-capitalize' );

	function toggleCapitalize() {
		document.body.classList.toggle( 'auto-capitalize' );
		if ( document.body.classList.contains( 'auto-capitalize' ) ) {
			document.getElementById( 'captions' ).addEventListener( 'keypress', capitalizeIfNeeded );
		} else {
			document.getElementById( 'captions' ).removeEventListener( 'keypress', capitalizeIfNeeded );
		}
	}
</script>

</body>
</html>

